class Solution {
public:
    int findfirst(vector<int>&nums, int target){
        int size = nums.size();
        int left = 0, right = size -1;
        int first =-1;
        while(left<=right){
            int mid = left + (right-left)/2;
            if(nums[mid]==target){
                first = mid;
                right = mid-1; // left searching 
            }
            if(nums[mid]<target){
                left = mid+1;
            }
            else{
                right = mid-1;
            }
        }
        return first;
    }
    int findlast(vector<int>&nums, int target){
        int size = nums.size();
        int left = 0, right = size -1;
        int last =-1;
        while(left<=right){
            int mid = left + (right-left)/2;
            if(nums[mid]==target){
                last = mid;
                left = mid+1; // continue searching right part 
            }
            else if(nums[mid]<target){
                left = mid+1;
            }
            else{
                right = mid-1;
            }
        }
        return last;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int>v;
        int x = findfirst(nums,target);
        int y = findlast(nums, target);
        return {x,y};
    }
};
